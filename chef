#!/usr/bin/env python3
""" chef.py: meta build tool for Yocto Project based Linux embedded systems."""

__author__ = "Christophe BLAESS, Patrick BOETTCHER"
__license__ = "GPL"

import argparse
import jsonschema
import json
import os
import shutil
import sys

from urllib.parse import urlparse

Command_line_args = ()
Menu = None

def main():
    parser = argparse.ArgumentParser(prog='Chef')
    parser.add_argument('--debug', action='store_true', help='activate debug printing')

    parser.add_argument('-v', '--verbose', action='store_true', help='activate debug printing')

    # parsing subcommand's arguments
    subparsers = parser.add_subparsers(help='subcommands of Chef')

    # clear command
    clear_parser = subparsers.add_parser('clear', help='clear the current directory')
    clear_parser.add_argument('menu', help='JSON filename of the menu', type=argparse.FileType('r'), nargs=1)
    clear_parser.set_defaults(func=clear_directory)

    # prepare command
    prepare_parser = subparsers.add_parser('prepare', help='create the content of the menu')
    prepare_parser.add_argument('menu', help='JSON filename of the menu', type=argparse.FileType('r'), nargs=1)
    prepare_parser.set_defaults(func=prepare_directory)

    # build command
    build_parser = subparsers.add_parser('build', help='build the targets from the menu')
    build_parser.add_argument('-s', '--sdk', action='store_true', help='build also the SDK')
    build_parser.add_argument('menu', help='JSON filename of the menu', type=argparse.FileType('r'), nargs=1)
    build_parser.add_argument('target', help='target to build', nargs='*')
    build_parser.set_defaults(func=build_targets)

    global Command_line_args
    Command_line_args = parser.parse_args()

    if Command_line_args.__getattribute__('menu'):

        global Menu
        if (Command_line_args.debug):
            print('Using menu "{}"'.format(Command_line_args.menu[0].name))
        try:
            Menu = json.load(Command_line_args.menu[0])
        except json.decoder.JSONDecodeError as e:
            print('menu load error at', e)
            sys.exit(1)

        script_path = os.path.dirname(os.path.realpath(__file__))
        with open(os.path.join(script_path, 'chef-menu-schema.json')) as schema_file:
            schema = json.load(schema_file)

            try:
                jsonschema.validate(Menu, schema)
            except jsonschema.exceptions.ValidationError as e:
                print('menu validation failed:', e)
                sys.exit(1)

    try:
        Command_line_args.func() # call function of selected command
    except:
        sys.exit(1)

    sys.exit(0)



def clear_directory():
    if Command_line_args.debug:
        print('Clearing directory')

    try:
        for source in Menu['sources']:
            remove_source(source)

        for target in Menu['targets']:
            directory = 'build-' + target
            remove_directory(directory)
    except:
        raise
    return 0



def prepare_directory():
    if Command_line_args.debug:
        print('Preparing directory')
    try:
        populate_directory()
    except:
        raise



def build_targets():
    if Command_line_args.debug:
         print('Building targets')

    try:
        populate_directory()

        for target in Menu['targets']:
            if len(Command_line_args.target) == 0 or target in Command_line_args.target:
                build_target(target, Menu['targets'][target])
    except:
        raise



def remove_directory(directory):
	if Command_line_args.debug:
            print('  Removing directory "{}"'.format(directory))

	if os.path.isdir(directory):
            shutil.rmtree(directory, ignore_errors=True)



def remove_source(source):
    if 'url' in source:
        try:
            url = urlparse(source['url'])
            remove_directory(url.path[1:])
        except:
            raise



def populate_directory():

    if Command_line_args.debug:
        print('  Populating directory')

    for source in Menu['sources']:
        download_source(source)

    for target in Menu['targets']:
        content = Menu['targets'][target]
        layers = content['layers']
        local_conf = content['local.conf']
        directory = 'build-' + target
        prepare_build_directory(directory, Menu['layers'], layers, local_conf)



def build_target(target_name, target):
    try:
        if Command_line_args.debug:
            print('  Building target {}'.format(target_name))

        directory = "build-" + target_name
        if 'image' in target:
            image = target['image']
        else:
            image = 'core-image-base'

        if "init-script" in target:
            init_script = target['init-script']
        else:
            init_script = 'poky/oe-init-build-env'
        command_line = 'env bash -c "source {} {} && bitbake {}"'.format(init_script, directory, image)
        if Command_line_args.debug:
            print('    Executing : "{}"'.format(command_line))
        os.system(command_line)
        if Command_line_args.sdk:
            command_line = 'env bash -c "source {} {} && bitbake -c populate_sdk {}"'.format(init_script, directory, image)
            if Command_line_args.debug:
                print('    Executing : "{}"'.format(command_line))
            os.system(command_line)
    except:
        raise



def download_source(source):

    method = 'git'
    remote_dir = ''
    local_dir  = ''

    if 'method' in source:
        method = source['method']

    if 'dir' in source:
        local_dir = source['dir']

    if 'url' in source:
        try:
            url = urlparse(source['url'])
        except:
            print('url-parse-error')
            raise
        remote_dir = url.geturl();
        if local_dir == '':
            local_dir = url.path[1:]

    if not os.path.isdir(local_dir):
        download_directory(method, remote_dir, local_dir)

    branch = ''
    if 'branch' in source:
        branch = source['branch']

    commit = ''
    if 'commit' in source:
        commit = source['commit']

    if os.path.isdir(local_dir):
        update_directory(method, local_dir, remote_dir != '', branch, commit)



def download_directory(method, remote_dir, local_dir):
    print('Downloading source from {}... '.format(remote_dir))

    if Command_line_args.verbose:
        redirect = ''
    else:
        redirect = ' >/dev/null 2>&1'

    if method == 'git':
        if os.system('git clone {} {} {}'.format(remote_dir, local_dir, redirect)) != 0:
            fatal_error('Unable to clone {}'.format(remote_dir))



def update_directory(method, local_dir, has_remote, branch, commit):

    if Command_line_args.verbose:
        redirect = ''
    else:
        redirect = ' >/dev/null 2>&1'

    if method == 'git':

        if commit == '':

            if 'branch' == '':
                print('BE CAREFUL: source "{}" has no "commit" nor "branch" field, the build will not be reproducible at all!'.format(local_dir))
                print('Trying to update source {}... '.format(local_dir))
                if has_remote:
                    if os.system('cd ' + local_dir + '; git pull' + redirect) != 0:
                        fatal_error('Unable to pull updates for {}'.format(local_dir))
            else:
                print('Warning: source "{}" has no "commit" field, the build will not be reproducible!'.format(local_dir))
                print('Updating source {}... '.format(local_dir))
                if os.system('cd ' + local_dir + '; git checkout ' + branch + redirect) != 0:
                    fatal_error('Unable to checkout branch {} for {}'.format(branch, local_dir))
                if has_remote:
                    if os.system('cd ' + local_dir + '; git pull' + redirect) != 0:
                        fatal_error('Unable to pull updates for {}'.format(local_dir))

        else:
            print('Updating source {}... '.format(local_dir))
            if os.system('cd ' + local_dir + '; git checkout ' + commit + redirect) != 0:
                fatal_error('Unable to checkout commit {} for {}'.format(commit, local_dir))



def prepare_build_directory(dir, global_layers, layers, local_conf):

    if Command_line_args.debug:
        print('    Preparing directory "build-{}"'.format(dir))

    if not os.path.isdir(dir):
        os.mkdir(dir)
    os.chdir(dir)
    if not os.path.isdir("conf"):
        os.mkdir("conf")

    with open('conf/local.conf', 'w') as file:
        file.write('\n# DO NOT EDIT! - This file is automatically created by chef.\n\n')
        for line in local_conf:
            file.write(line + '\n')

        file.write('''DL_DIR ?= "${TOPDIR}/../downloads"
SSTATE_DIR ?= "${TOPDIR}/../sstate-cache"
DISTRO ?= "poky"
PACKAGE_CLASSES ?= "package_rpm"
BB_DISKMON_DIRS ??= "\\
\tSTOPTASKS,${TMPDIR},1G,100K \\
\tSTOPTASKS,${DL_DIR},1G,100K \\
\tSTOPTASKS,${SSTATE_DIR},1G,100K \\
\tSTOPTASKS,/tmp,100M,100K \\
\tABORT,${TMPDIR},100M,1K \\
\tABORT,${DL_DIR},100M,1K \\
\tABORT,${SSTATE_DIR},100M,1K \\
\tABORT,/tmp,10M,1K"
CONF_VERSION = "1"
''')

    with open('conf/bblayers.conf', 'w') as file:
        file.write('\n# DO NOT EDIT! - This file is automatically created by chef.\n\n')
        file.write('''POKY_BBLAYERS_CONF_VERSION = "2"
BBPATH = "${TOPDIR}"
BBFILES ?= ""
''')

        file.write('BBLAYERS ?= " \\\n')
        for layer in global_layers:
            file.write('${TOPDIR}/../' + layer + '  \\\n')
        for layer in layers:
            file.write('${TOPDIR}/../' + layer + '  \\\n')
        file.write('"\n')

    with open('conf/templateconf.cfg', 'w') as file:
        file.write("meta-poky/conf\n")

    os.chdir("..")


def fatal_error(string):
    print(string)
    sys.exit(1)


if __name__ == '__main__':
    main()
